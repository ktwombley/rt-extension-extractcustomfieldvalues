# -*- perl -*-

@ScripActions = (

    { Name        => 'Extract Custom Field Values',          # loc
      Description => 'extract cf-values out of a message',    # loc
      ExecModule  => 'ExtractCustomFieldValues' },

    { Name        => 'Extract Custom Field Values With Code in Template', # loc
      Description => 'extract cf-values out of a message with a Text::Template template',    # loc
      ExecModule  => 'ExtractCustomFieldValuesWithCodeInTemplate' }

);

@Templates = (
    {  Queue       => '0',
       Name        => 'CustomFieldScannerExample',                     # loc
       Description => 'Example Template for ExtractCustomFieldValues', # loc
       Content     => <<'EOTEXT'
#### Syntax:
# CF Name | Header name or "Body" | MatchString(re) | Postcmd | Options

#### Allowed Options:

# q - (quiet) Don't record a transaction for adding the custom field
#     value
# * - (wildcard) The MatchString regex should contain _two_
#     capturing groups, the first of which is the CF name,
#     the second of which is the value.  If this option is
#     given, the <cf-name> field is ignored.
# x - (xml) The MatchString should be an XPath query, not a regex.
#     This will treat the header/body as an xml document and
#     find results via XPath. The header/body must contain
#     a valid xml document.
# x*- (xml wildcard) The MatchString should contain an xml 
#     document, not a regex. The document should be of the form:
#     <find><root>/XPath/query</root><name>/XPath/query</name>
#         <value>/XPath/query</value></find>
#     (Note: your document should be all on one line)
#     This will create a 2-step search. First RT will find the
#     xml nodes requested by the root XPath query. Then, within
#     those nodes, RT will find the CF name and CF value using the
#     other two XPath queries. This matches the wildcard search
#     above.



#### Examples:

# 1. Put the content of the "X-MI-Test" header into the "testcf"
#    custom field:
# testcf|X-MI-Test|.*

# 2. Scan the body for Host:name and put name into the "bodycf" custom
#    field:
# bodycf|Body|Host:\s*(\w+)

# 3. Scan the "X-MI-IP" header for an IP-Adresse and get the hostname
#    by reverse-resolving it:
# Hostname|X-MI-IP|\d+\.\d+\.\d+\.\d+|use Socket; ($value) = gethostbyaddr(inet_aton($value),AF_INET);

# 4. scan the "CC" header for an many email addresses, and add them to
#    a custom field named "parsedCCs". If "parsedCCs" is a multivalue
#    CF, then this should yield separate values for all email adress
#    found.
# parsedCCs|CC|.*|$value =~ s/^\s+//; $value =~ s/\s+$//;

# 5. Looks for an "Email:" field in the body of the email, then loads
#    up that user and makes them privileged The blank first field
#    means the automatic CustomField setting is not invoked.
# |Body|Email:\s*(.+)$|my $u = RT::User->new($RT::SystemUser); $u->LoadByEmail($value); $u->SetPrivileged(1)|

# 6. Looks for any text of the form "Set CF Name: Value" in the body,
#    and sets the CF named "CF Name" to the given value, which may be
#    multi-line.  The '*' option controls the wildcard nature of this
#    example.
# Separator=!
# !Body!^Set ([^\n:]*?):\s*((?s).*?)(?:\Z|\n\Z|\n\n)!!*

# 7. Looks for the regex anywhere in the headers and stores the match
#    in the AllHeaderSearch CF
# AllHeaderSearch|Headers|Site:\s*(\w+)

# 8. If you need to dynamically build your matching, and want to trigger on headers and body
#    and invode some arbitrary code like example 5
# Separator=~~
# {
#    my $action = 'use My::Site; My::Site::SetSiteID( Ticket => $self->TicketObj, Site => $_ );';
#
#    for my $regex (My::Site::ValidRegexps) {
#        for my $from ('headers', 'body') {
#            $OUT .= join '~~',
#                '', # CF name
#                $from,
#                $regex,
#                $action;
#            $OUT .= "\n";
#        }
#    }
# }

# 9. Scan the xml file for <host>name</host> and put name into the
#    "bodycf" custom field:
# bodycf|Body|//host||x

# 10. Suppose your anti-virus server sends out alerts with xml attachments
#     when it finds an infected host.
#     <report>
#       <infectedhost>
#         <hostname>alice.corp.tld</hostname>
#         <ip>192.168.1.101</ip>
#         <virusname>W32/Really.Bad</virusname>
#       </infectedhost>
#       <infectedhost>
#         <hostname>bob.corp.tld</hostname>
#         <ip>192.168.1.102</ip>
#         <virusname>W32/Holycow.Spyware</virusname>
#       </infectedhost>
#     </report>
#
#     You might slurp this into RT this way:
# AntivirusSearch|body|<find><root>/report/infectedhost</root><name>name(./*)</name><value>./*</value>
#
#     Assuming you have CFs named hostname, ip, and virusname, this 
#     will populate them. If those are multivalue CFs, then it will
#     yeild separate results.


EOTEXT
    }
);

1;
